#!/bin/bash
set -e
set -o pipefail

PREVIOUS_WORKING_DIRECTORY="${PWD}"

CODESHIP_GOOGLE_APP_ENGINE_PROJECT=${CODESHIP_GOOGLE_APP_ENGINE_PROJECT:-""}
CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT=${CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT:-""}
CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_FOLDER=${CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_FOLDER:-"${PWD}"}
CODESHIP_GOOGLE_APP_ENGINE_URL=${CODESHIP_GOOGLE_APP_ENGINE_URL:-""}
CODESHIP_GOOGLE_APP_ENGINE_CHECK_URL=${CODESHIP_GOOGLE_APP_ENGINE_CHECK_URL:-false}
CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_COMMAND=${CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_COMMAND:-"gcloud"}
CODESHIP_GOOGLE_APP_ENGINE_KEEP_VERSIONS=${CODESHIP_GOOGLE_APP_ENGINE_KEEP_VERSIONS:-5}

SCRIPT_DIRECTORY="$( cd "$(dirname "$0")" ; pwd -P )"

function help {
  cat << EOF
codeship_app_engine_deploy Usage:
--

required:
-P or CODESHIP_GOOGLE_APP_ENGINE_PROJECT: app engine project id
-C or CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT: app engine key content

optional:
-f or CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_FOLDER: folder to deploy
-u or CODESHIP_GOOGLE_APP_ENGINE_URL: url running the service (to use in conjunction with -c)
-c or CODESHIP_GOOGLE_APP_ENGINE_CHECK_URL: check url if service is running after deployment [true/false]
-d or CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_COMMAND: which tool to use for deployment [gcloud/maven] (most useful to switch to maven for java deployment)
-k or CODESHIP_GOOGLE_APP_ENGINE_KEEP_VERSIONS: how many versions to keep online after deployment
-h: this

EOF
}

function check_url {
  local tries=6
  local status=0
  local cmd="wget --no-check-certificate --output-document=/dev/null ${1}"

  for (( i = 1; i <=${tries}; i++ )); do
    echo -e "\e[0;36mTrying ($i of ${TRIES}) '${cmd}'\e[0m"
    ${cmd}
    status=$?

    if [ ${status} -eq 0 ]; then
      break
    fi

    if [ ${status} -eq 5 ]; then
      echo -e "\e[0;33mCheck failed because of an error validating the SSL certificate.\e[0m"
      echo -e "\e[0;33mWe will retry without checking the certificate, but this behaviour will change in the future!\e[0m"
      cmd="${original_cmd}"
      status=0
    fi

    if [ $i -lt ${TRIES} ]; then
      echo -e "\e[0;36mWaiting ${WAIT} seconds before trying again.\e[0m"
      echo "------------------------------------------------------------------------------------------------------"
      sleep "${WAIT}"
    fi
  done

  return ${status}
}

while getopts "hK:P:C:f:d:u:k:c" opt; do
  case "$opt" in
    P)
      CODESHIP_GOOGLE_APP_ENGINE_PROJECT="$OPTARG"; ;;
    K)
      CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT="$OPTARG"; ;;
    f)
      CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_FOLDER="$OPTARG"; ;;
    d)
      CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_COMMAND="$OPTARG"; ;;
    u)
      CODESHIP_GOOGLE_APP_ENGINE_URL="$OPTARG"; ;;
    c)
      CODESHIP_GOOGLE_APP_ENGINE_CHECK_URL=true; ;;
    k)
      CODESHIP_GOOGLE_APP_ENGINE_KEEP_VERSIONS=${OPTARG}; ;;
    h) help; exit 0 ;;
    *)
      help
      exit 1 ;;
  esac
done

#input validation
if [ "${CODESHIP_GOOGLE_APP_ENGINE_PROJECT}" == "" ]; then
  echo "project not set, exiting" >&2
  help
  exit 1
fi

#input validation
if [ "${CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT}" == "" ] ; then
  echo "key-content not set, exiting" >&2
  help
  exit 1
fi

if [ "${CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_COMMAND}" != "maven" ] && [ "${CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_COMMAND}" != "gcloud" ]; then
  echo "deploy-command not maven or gcloud"
  help
  exit 1
fi

if ! (echo "${CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT}" | jq . > /dev/null 2>&1) ; then
  echo "key-content not valid JSON, exiting" >&2
  help
  exit 1
fi

trap 'echo error executing "$BASH_COMMAND" in line $LINENO' ERR

if [ "${CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_FOLDER}" != "${PWD}" ]; then
  echo "Changing directory to ${CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_FOLDER}"
  cd "${CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_FOLDER}"
fi

gcloud auth activate-service-account --key-file <(echo "${CODESHIP_GOOGLE_APP_ENGINE_KEY_CONTENT}")

case "${CODESHIP_GOOGLE_APP_ENGINE_DEPLOY_COMMAND}" in
"gcloud")
  gcloud app deploy --project "${CODESHIP_GOOGLE_APP_ENGINE_PROJECT}"
  ;;
"maven")
  mvn appengine:deploy -Dapp.deploy.project="${CODESHIP_GOOGLE_APP_ENGINE_PROJECT}"
  ;;
esac


if [ "${CODESHIP_GOOGLE_APP_ENGINE_CHECK_URL}" == "true" ]; then
  if [ "${CODESHIP_GOOGLE_APP_ENGINE_URL}" != "" ]; then
    URL="${CODESHIP_GOOGLE_APP_ENGINE_URL}"
  else
    URL="$(gcloud app describe --project "${CODESHIP_GOOGLE_APP_ENGINE_PROJECT}" | grep defaultHostname | awk '{printf "http://%s", $2}')"
  fi
  check_url "${URL}"
fi

VERSIONS=$(gcloud app versions list --project "${CODESHIP_GOOGLE_APP_ENGINE_PROJECT}" --format 'value(version.id)' | sort -r)

VERSION_COUNT=0
echo "Cleaning up after deployment, keeping the last ${CODESHIP_GOOGLE_APP_ENGINE_KEEP_VERSIONS} versions."
for VERSION in ${VERSIONS}; do
  ((++VERSION_COUNT))
  if [[ "${VERSION_COUNT}" -gt "${CODESHIP_GOOGLE_APP_ENGINE_KEEP_VERSIONS}" ]]; then
    gcloud app versions delete "${VERSION}" --project "${CODESHIP_GOOGLE_APP_ENGINE_PROJECT}"
  else
    echo "Skipping version ${VERSION}"
  fi
done

cd "${PREVIOUS_WORKING_DIRECTORY}"
